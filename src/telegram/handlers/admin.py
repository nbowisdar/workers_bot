from aiogram import F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Text, Command

from src.telegram.handlers.fsm_handlers.create_position import PositionState
from src.telegram.handlers.fsm_handlers.update_user import UpdateWorker
from src.telegram.keyboards import admin_kb_main, admin_kb_pos, choose_time_btn
from loguru import logger
from aiogram.fsm.context import FSMContext
from src.telegram.handlers.fsm_handlers import CreateWorker, Shift, DropUser
from src.telegram.messages import message_with_all_users, msg_with_positions
from src.telegram.setup import admin_router, admins, admins_hip
from src.telegram.keyboards import cancel_kb
from src.database import get_all_workers, get_all_position


def is_admin(worker_id: int) -> bool:
    if worker_id in admins:
        return True
    return False


async def denied(message: Message):
    await message.answer('üõë–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ü–µ–π —Ä–æ–∑–¥—ñ–ª!üõë')


async def check_access(message: Message):
    if not is_admin(message.from_user.id):
        await denied(message)
        raise Exception('Have no access')


# @admin_router.message(Text(text="adminüßë‚Äçüíª"))
@admin_router.message(F.text.in_({"adminüßë‚Äçüíª", "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"}))
async def main(message: Message):
    try:
        await check_access(message)
        await message.answer('–í–∏ –≤ —Ä–æ–∑—ñ–¥—ñ–ª—ñ –∞–¥–º—ñ–Ω–∞', reply_markup=admin_kb_main)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message(Text(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"))
async def create_user(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await state.set_state(CreateWorker.worker_id)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å id –Ω–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=cancel_kb)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message(Text(text="–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"))
async def delete_worker(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await state.set_state(DropUser.worker_id)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å id –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:\n", reply_markup=cancel_kb)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message(Text(text="–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"))
async def update_worker(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await state.set_state(UpdateWorker.worker_id)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å id –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ—Ç—Ä–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏:", reply_markup=cancel_kb)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message(Text(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–º—ñ–Ω—É"))
async def create_new_shift(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await state.set_state(Shift.worker_id)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å id –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=cancel_kb)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message(Text(text="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö"))
async def show_all_workers(message: Message):
    try:
        await check_access(message)
        users = get_all_workers()
        msg = message_with_all_users(users)
        await message.answer(msg,
                             reply_markup=admin_kb_main,
                             parse_mode="MARKDOWN")
    except Exception as err:
        logger.error(f'User {message.from_user.id} tried use admin panel!')
        logger.error(err)

#286365412
@admin_router.message(Text(text="–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"))
async def get_worker_info(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", reply_markup=choose_time_btn)
        await state.set_state()
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')


@admin_router.message((F.text == "–ü–æ—Å–∞–¥–∏") & (F.from_user.id.in_(admins_hip)))
async def position(message: Message):
    await check_access(message)
    await message.answer("–†–æ–∑–¥—ñ–ª: *–ü–æ—Å–∞–¥–∏*",
                         reply_markup=admin_kb_pos,
                         parse_mode="MARKDOWN")


@admin_router.message((F.text == "–£—Å—ñ –ø–æ—Å–∞–¥–∏") & (F.from_user.id.in_(admins_hip)))
async def show_pos(message: Message):
    all_pos = get_all_position()
    if not all_pos:
        await message.answer("–í–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–µ –æ–¥–Ω—ñ—î—ó –ø–æ—Å–∞–¥–∏", reply_markup=admin_kb_pos)
        return
    msg = msg_with_positions(all_pos)
    await message.answer(msg, reply_markup=admin_kb_pos, parse_mode="MARKDOWN")


@admin_router.message((F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–æ—Å–∞–¥—É") & (F.from_user.id.in_(admins_hip)))
async def create_pos(message: Message, state: FSMContext):
    try:
        await check_access(message)
        await state.set_state(PositionState.name)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–∞–¥–∏", reply_markup=cancel_kb)
    except:
        logger.error(f'User {message.from_user.id} tried use admin panel!')



# @admin_router.message(Command(commands='test'))
# async def test(message: Message):
#     await message.answer(
#         "`test`",
#
#     )